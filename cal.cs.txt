using System;

class FourHundredYearCalendar
{
    static void Main()
    {
        Console.WriteLine("400-Year Calendar (1600-2000)");
        Console.WriteLine("=============================");
        
        // Display calendar for 400 years (1600-2000)
        for (int year = 1600; year <= 2000; year++)
        {
            // Only display every 20 years to make it manageable
            if (year % 20 == 0)
            {
                Console.WriteLine($"\nYear: {year}");
                Console.WriteLine("----------------");
                
                for (int month = 1; month <= 12; month++)
                {
                    DisplayMonth(year, month);
                }
            }
        }
        
        // Alternatively, you could prompt for a specific year to display
        Console.WriteLine("\nEnter a year between 1600 and 2000 to see its full calendar:");
        int inputYear = int.Parse(Console.ReadLine());
        
        if (inputYear >= 1600 && inputYear <= 2000)
        {
            Console.WriteLine($"\nCalendar for {inputYear}:");
            Console.WriteLine("---------------------");
            
            for (int month = 1; month <= 12; month++)
            {
                DisplayMonth(inputYear, month);
            }
        }
        else
        {
            Console.WriteLine("Year out of range. Please enter between 1600-2000.");
        }
    }
    
    static void DisplayMonth(int year, int month)
    {
        string monthName = GetMonthName(month);
        int daysInMonth = GetDaysInMonth(year, month);
        int firstDayOfWeek = GetFirstDayOfWeek(year, month);
        
        Console.WriteLine($"\n{monthName} {year}");
        Console.WriteLine("Su Mo Tu We Th Fr Sa");
        
        // Print leading spaces
        for (int i = 0; i < firstDayOfWeek; i++)
        {
            Console.Write("   ");
        }
        
        // Print days
        for (int day = 1; day <= daysInMonth; day++)
        {
            Console.Write($"{day,2} ");
            
            if ((day + firstDayOfWeek) % 7 == 0 || day == daysInMonth)
            {
                Console.WriteLine();
            }
        }
    }
    
    static string GetMonthName(int month)
    {
        return month switch
        {
            1 => "January",
            2 => "February",
            3 => "March",
            4 => "April",
            5 => "May",
            6 => "June",
            7 => "July",
            8 => "August",
            9 => "September",
            10 => "October",
            11 => "November",
            12 => "December",
            _ => throw new ArgumentOutOfRangeException("Invalid month")
        };
    }
    
    static int GetDaysInMonth(int year, int month)
    {
        return month switch
        {
            4 or 6 or 9 or 11 => 30,
            2 => IsLeapYear(year) ? 29 : 28,
            _ => 31
        };
    }
    
    static bool IsLeapYear(int year)
    {
        if (year % 4 != 0) return false;
        if (year % 100 != 0) return true;
        return year % 400 == 0;
    }
    
    // Zeller's Congruence algorithm to find the first day of the month
    static int GetFirstDayOfWeek(int year, int month)
    {
        if (month < 3)
        {
            month += 12;
            year--;
        }
        
        int k = year % 100;
        int j = year / 100;
        
        // 0 = Saturday, 1 = Sunday, 2 = Monday, ..., 6 = Friday
        int dayOfWeek = (1 + 13 * (month + 1) / 5 + k + k / 4 + j / 4 + 5 * j) % 7;
        
        // Convert to 0 = Sunday, 1 = Monday, ..., 6 = Saturday
        return (dayOfWeek + 5) % 7;
    }
}